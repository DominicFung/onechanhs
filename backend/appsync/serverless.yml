service: onechanhs-backend
app: onechanhs


# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ca-central-1

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:ListUsers
            - cognito-idp:ListGroups
            - cognito-idp:AdminListGroupsForUser
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:AdminRemoveUserFromGroup
            - cognito-idp:ListUsersInGroup
            - cognito-idp:AdminConfirmSignUp
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:VerifyUserAttribute
            - cognito-idp:AdminDeleteUser
          Resource: 'arn:aws:cognito-idp:*:${aws:accountId}:userpool/*'
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:ListBucket
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetSignedUrlPromise
          Resource: 'arn:aws:s3:::${self:custom.imagesBucketName}/*'
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:ListTables
          Resource: 'arn:aws:dynamodb:*:*:*'
    
     

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  individually: true

functions:
  hello:
    handler: handler.hello
  
  get-store-item-pic:
    handler: functions/handlers/storeItems.getStoreItemWithPic
    environment:
      bucket: ${self:custom.imagesBucketName}
      table: ${self:custom.storeItemTableName}
      signed_url_expires: 86400

  list-store-items:
    handler: functions/handlers/storeItems.listItems

  create-order:
    handler: functions/handlers/orders.createOrder
    environment:
      orderTable: '${self:custom.orderTableName}'
      orderItemsTable: '${self:custom.orderItemTableName}'

  create-item-full:
    handler: functions/handlers/storeItems.createItemFull
    environment:
      table: ${self:custom.storeItemTableName}

  image-resize:
    handler: functions/handlers/image.imageResize
    events:
      - s3:
          bucket: ${self:custom.imagesBucketName}
          event: s3:ObjectCreated:*
          existing: true

  image-resize-test:
    handler: functions/handlers/image.test
  

resources:
  Resources:
    ${file(./resources.yml)}

custom:

  # custom variables
  imagesBucketName: onechanhs-images
  storeItemTableName: storeItem
  orderTableName: order
  orderItemTableName: orderItem

  includeDependencies:
    - 'node_modules/jimp/**'

  dynamodb:
    stages:
      - dev

  amplify:
    - filename: ../../src/aws-exports.js
      type: javascript
      appClient: cognitoUserPoolClient
      s3Bucket: s3SharedBucketArtifacts

    # run the following to generate types and schemas:
    #     amplify add codegen --apiId uawusirgujavffiymdvu3cqdhq
    #     amplify codegen

    # - filename: ../../schema.graphql
    #   type: graphql
    # - filename: ../../schema.json
    #   type: schema.json
    
    
    # - filename: ../../src/API.ts
    #   type: appsync

  appSync:
    name: onechanhs-api
    authenticationType: AMAZON_COGNITO_USER_POOLS
    additionalAuthenticationProviders:
      - authenticationType: AWS_IAM
    userPoolConfig:
      awsRegion: ca-central-1
      defaultAction: ALLOW
      userPoolId: !Ref cognitoUserPool
    mappingTemplatesLocation: mapping-templates

    schema: 'schema.graphql'

    mappingTemplates:
      
      - type: Query
        field: getStoreItemById
        dataSource: storeItemsTable
      
      - type: Mutation
        field: createItem
        dataSource: storeItemsTable

      - type: Query
        field: getStoreItemWithPic
        dataSource: "getStoreItemWithPic"
        request: Query.general.request.vtl
        response: Query.general.response.vtl

      - type: Query
        field: listItems
        dataSource: "listItems"
        request: Query.general.request.vtl
        response: Query.general.response.vtl

      - type: Mutation
        field: createOrder
        dataSource: "createOrder"
        request: Mutation.general.request.vtl
        response: Mutation.general.response.vtl

      - type: Mutation
        field: createItemFull
        dataSource: "createItemFull"
        request: Mutation.general.request.vtl
        response: Mutation.general.response.vtl
    
    dataSources:
      - type: AMAZON_DYNAMODB
        name: storeItemsTable
        config:
          tableName: !Ref storeItem

      - type: AWS_LAMBDA
        name: "getStoreItemWithPic"
        config:
          functionName: get-store-item-pic

      - type: AWS_LAMBDA
        name: "listItems"
        config:
          functionName: list-store-items

      - type: AWS_LAMBDA
        name: "createOrder"
        config:
          functionName: create-order

      - type: AWS_LAMBDA
        name: "createItemFull"
        config:
          functionName: create-item-full

plugins:
  - serverless-plugin-typescript
  - serverless-appsync-plugin

  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies

  - aws-amplify-serverless-plugin

  - serverless-dynamodb-local
  - serverless-appsync-simulator
  - serverless-offline
