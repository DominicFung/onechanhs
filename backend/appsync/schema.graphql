schema {
  query: Query
  mutation: Mutation
}

type Query {
  getStoreItemById(itemId: ID!): StoreItem! 
    @aws_iam @aws_cognito_user_pools(cognito_groups: ["Admin", "Customer"])
  getStoreItemWithPic(itemId: ID!): StoreItem! @aws_iam @aws_cognito_user_pools
  getStoreItemByTitle(title: String!): StoreItem! @aws_iam @aws_cognito_user_pools

  listItems(limit: Int!, nextToken: String): StorePage! @aws_iam @aws_cognito_user_pools
  getHDImage(key: String): HdImageURL @aws_iam @aws_cognito_user_pools

  getOrder(orderId: String!): Order!
}

type Mutation {
  createItem(newItem: ItemInput): StoreItem! @aws_auth(cognito_groups: ["Admin"])
  createItemFull(newItem: ItemInput): StoreItem! @aws_auth(cognito_groups: ["Admin"])

  createOrder(newOrder: OrderInput): OrderOutput! @aws_iam @aws_cognito_user_pools
}

type StorePage @aws_iam @aws_cognito_user_pools {
  storeItems: [StoreItem]
  nextToken: String
}

type HdImageURL @aws_iam @aws_cognito_user_pools {
  url: AWSURL
}

type OrderOutput @aws_iam @aws_cognito_user_pools {
  orderId: ID!
  email: AWSEmail!

  orderItems: [OrderItemOutput]
  totalPrice: Float!
}

type OrderItemOutput @aws_iam @aws_cognito_user_pools {
  itemId: ID!
  purchasePrice: Float!
  
  text: String
  size: String
  color: String
  orientation: String

  additionalInstructions: String
}

input ItemInput {
  title: String!
  description: String
  price: Float!
}

input OrderInput {
  items: [OrderItemInput]
  email: AWSEmail!

  address: String
  postalCode: String
  city: String
  state: String
  country: String

  shipmentChoice: String
  paymentPlatform: String
  paymentData: String
}

input OrderItemInput {
  itemId: ID!
  
  text: String
  size: String
  color: String
  orientation: String

  additionalInstructions: String
}

# -- BASE TYPES --
# @aws_iam @aws_cognito_user_pools
type StoreItem @aws_iam @aws_cognito_user_pools {
  itemId: ID!
  linkId: String!

  title: String!
  description: String
  
  focusPictureUrl: String   # always the first image   - not saved in DB
  pictures: [String]        # always thumbnails        - saved in DB as S3 Keys
  picKeys: [String]         # used to fetch HD presigned URLs

  price: Float!
  currency: String!
  discountPrice: Float
  
  hashtags: [String]!
  shortDescription: String
  
  customizeTextInstructions: String
  
  sizes: [String]!
  colors: [String]! #hex
  orientations: [String]!
  
  isPublished: Boolean
}

type Order {
  orderId: ID!
  email: AWSEmail!
  address: String
  postalCode: String
  city: String
  state: String
  country: String

  orderItems: [OrderItem]

  discount: Float
  discountCodeUsed: String

  shipmentChoice: String
  shipmentPrice: Float  # based on location / mapped in code

  isFulfilled: Boolean
  fulfilledDate: Int # AWSDateTime
  
  dateOrdered: Int   # AWSDateTime

  isPaymentProcessed: Boolean
  paymentPlatform: String  # SQUARE 
  paymentData: String
  totalPrice: Float
}

type OrderItem {
  orderItemId: ID!
  
  itemId: ID!
  purchasePrice: Float!

  text: String
  size: String
  color: String
  orientation: String

  additionalInstructions: String
}